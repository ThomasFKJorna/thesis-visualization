/* eslint-disable react/jsx-props-no-spreading */
import {
  Box,
  Text,
  Heading,
  UnorderedList,
  OrderedList,
  ListItem,
  Tag,
  Container,
  chakra,
} from '@chakra-ui/react'
import { ReactNode } from 'react'
import Link from 'next/link'
// import Image from 'next/image'
import { MDXComponents } from 'mdx/types'
import { PreviewLink } from '../FileViewer/Link'
// import { MDXLinkBase } from './MDXLink'
// import { WithId } from './WithId'

export const createMdxRehypeReactCompents = (currentId: string): MDXComponents => {
  // const LinkWithId = WithId<'a'>(MDXLinkBase, currentId)
  const components: MDXComponents = {
    h1: (head) => {
      const { className, children } = head
      if (className === 'title') {
        return null
      }
      if ((children as string)?.[0] === 'Footnotes:') return null
      return (
        <Heading variant="org" size="lg" {...head}>
          {children as ReactNode}
        </Heading>
      )
      // return <Heading className="title">{value as string}</Heading>
    },
    h2: (props) => <Heading {...props} variant="org" as="h3" size="md" />,
    h3: (props) => <Heading {...props} variant="org" as="h4" size="sm" />,
    h4: (props) => <Heading {...props} variant="org" as="h5" size="xs" />,
    p: ({ children, ...rest }) => (
      <Text lang="en" variant="org" {...{ ...rest }}>
        {children as ReactNode}
      </Text>
    ),
    div: (div) => {
      const { className, id, children, ...rest } = div
      if (id === 'refs') {
        return (
          <Box {...{ className, id }}>
            <Heading>References</Heading>
            {children}
          </Box>
        )
      }
      /**
       * These are the bibliography divs generated by rehype-citation
       */
      if (className?.includes('csl-entry')) {
        return <Text variant="org">{children}</Text>
      }

      return <Box {...{ className, id }}>{children}</Box>
    },
    a: (node) => {
      // @ts-expect-error TODO: types aaaaa
      const { href, className, alias, children } = node
      if (href?.includes('http')) {
        return (
          <Link href={href as string} passHref>
            <a href={href}>{children as ReactNode}</a>
          </Link>
        )
      }

      if (['footnum', 'footref'].includes(className as string)) {
        return (
          <Text variant="org" as="span" fontWeight="bold" color="primary">
            <Link href={href as string}>
              <a href="href">{children as ReactNode}</a>
            </Link>
          </Text>
        )
      }

      return (
        <PreviewLink
          currentId={currentId}
          title={alias}
          href={`${(href as string).replace(/#\/page\/?/, '')}`}
        >
          {children}
        </PreviewLink>
      )
    },

    ul: UnorderedList,
    ol: OrderedList,
    li: ListItem,
    blockquote: ({ children, ...quote }) => {
      console.log(quote)
      console.log(children)
      // @ts-expect-error idk what to tell you an it's an array
      const [, possibleCallout, ...restOfQuote] = children || []

      const [callout, ...restOfCallout] = possibleCallout?.props?.children || []
      if (callout && typeof callout === 'string' && callout.match(/\[!.*?\]/)) {
        const calloutType = callout.replace(/\[!(.*?)\]/, '$1')
        console.log(restOfQuote)
        return (
          <chakra.blockquote
            bgColor="brand.50"
            p={4}
            overflow="clip"
            borderColor="brand.100"
            mr={8}
            my={8}
          >
            <Box px={4} py={2}>
              <Tag bgColor="brand.500" color="brand.50">
                {calloutType}
              </Tag>
              {restOfCallout && (
                <Text color="brand.600" variant="org" my={2} fontSize="lg">
                  {restOfCallout}
                </Text>
              )}
            </Box>
            <Box sx={{ fontSize: 'xs !important' }} px={4} py={2} bgColor="brand.50">
              {restOfQuote.map((thing, index) => {
                if (thing === '\n') return null
                if (thing?.type?.name === 'p') {
                  return (
                    <Text
                      color="brand.900"
                      key={thing?.props?.children?.join('') || index}
                      fontSize="sm"
                    >
                      {thing.props.children}
                    </Text>
                  )
                }
                return thing
              })}
            </Box>
          </chakra.blockquote>
        )
      }
      return (
        <Container borderLeftWidth={4} borderColor="primary">
          {children}
        </Container>
      )
    },

    span: ({ className, children, ...rest }) => {
      if (className?.includes('citation')) {
        //
      }
      if (['span-addition', 'span-deletion'].includes(className as string)) {
        return (
          // @ts-expect-error yeah man
          <Text {...rest} as="span" variant="org" className={className as string}>
            {children as ReactNode}
          </Text>
        )
      }
      return (
        // @ts-expect-error yeah man
        <Text as="span" {...{ className: className as string, ...rest }}>
          {children as ReactNode}
        </Text>
      )
    },
    section: ({ className, children }) => {
      const kids = children as React.ReactElement[]
      if (kids?.[0]?.type === 'h15') {
        if (kids?.[0]?.props?.id?.startsWith('end')) {
          return kids?.slice(1) as ReactNode
        }
        return (
          <details>
            <summary>
              <Tag bg="primary" color="white" fontWeight="bold" _hover={{ cursor: 'pointer' }}>
                TODO
              </Tag>
            </summary>
            {kids}
          </details>
        )
      }
      return (
        <Box className={className as string} as="section">
          {kids}
        </Box>
      )
    },
    img: ({ src }) => <img src={(src as string).replace(/\.\/media\//g, '/media/')} />,
  } as MDXComponents
  return components
}
